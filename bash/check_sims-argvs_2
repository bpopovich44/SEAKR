#!/bin/bash -e
######################################################################
##
##  This script can take in a parameter for directory holding sim jobs
##  to check total run time
##
######################################################################

# positional parameter
ARGV=("$@")
num_of_args=${#ARGV[@]}

longest_time=
quickest_time=
TOTAL_RUNTIME=0

longest_turn=
quickest_turn=
TOTAL_TURNTIME=0

# Arrays
RUNTIMES=()
TURNTIMES=()
TIME_HOST_TURN=()

sub_datEtime=
rep_datEtime=
#f_sub_datEtime=
#f_rep_datEtime=
f_sub_datEtime=$(date +%s -d "$sub_datEtime")
f_rep_datEtime=$(date +%s -d "$rep_datEtime")
x=true
y=true

dir="$(pwd)/"
num_start=0                       
launch1=true
launch2=true

# Color
RED='\33[0;31m'
LRED='\33[1;31m'
GREEN='\33[0;32m'
LGREEN='\33[1;32m'
ORANGE='\33[0;33m'
LORANGE='\33[1;33m'
BLUE='\33[0;34m'
LBLUE='\33[1;34m'
PURPLE='\33[0;35m'
LPURPLE='\33[1;35m'
CYAN='\33[0;36m'
LCYAN='\33[1;36m'
NC='\33[0m'



# convert total seconds to day-hour-min-sec
conv_sec()
{
        local t=$1

        local d=$((t/60/60/24))
        local h=$((t/60/60%24))
        local m=$((t/60%60))
        local s=$((t%60))

        if [[ $d -gt 0 ]]; then
                [[ $d -eq 1 ]] && echo -n "$d day " || echo -n "$d days "
        fi
        if [[ $h -gt 0 ]]; then
                [[ $h -eq 1 ]] && echo -n "$h hour " || echo -n "$h hours "
        fi
        if [[ $m -gt 0 ]]; then
                [[ $m -eq 1 ]] && echo -n "$m minute " || echo -n "$m minutes "
        fi
        if [[ $s -gt 0 ]]; then
                [[ $s -eq 1 ]] && echo -n "$s second " || echo -n "$s seconds "
        fi
}




while [[ $num_start -lt $num_of_args ]]
do
        for file in "${ARGV[$num_start]}"/*
        do
                if [[ -d $file ]]
                then    
                        :
                
                elif [[ -f $file ]]
                then
                        ###############  put if-else statement for if not passed
               
                        # parameter expansion to pull host name out of file name
                        host=${file%/*}
                        host=${host##*_}

                        # parameter expansion to pull executed file out index
                        e_file=${file%.*}
                        e_file=${e_file#*/}


                        result=$(grep -i "Simulation Passed" $file)
                        starttime=$(grep -i "started at" $file)
                        terminatedat=$(grep -i "terminated at" $file)
                        cputime=$(grep -i "cpu time" $file)
                        maxmemory=$(grep -i "max memory" $file)
                        totalmemory=$(grep -i "total requested memory" $file)
                        deltamemory=$(grep -i "delta memory" $file)
                        maxswap=$(grep -i "max swap" $file)
                        maxprocess=$(grep -i "max processes" $file)
                        maxthreads=$(grep -i "max threads" $file)
                        runtime=$(grep -i "run time" $file)
                        turnaround=$(grep -i "turnaround time" $file)
                        submitted=$(grep -i "submitted from host" $file)
                        sub_datEtime=${submitted##*at}
                        reported=$(grep -i "reported at" $file)
                        rep_datEtime=${reported##*at}
                      
                        echo "----------------------------------------------------------------------------------"                
                        printf "                         ${LGREEN}HOST: ${NC}${LPURPLE}$host${NC}  ${LGREEN}File ran: ${NC} ${LPURPLE}$e_file${NC}\n"
                        echo $result
                        echo $runtime
                        echo $turnaround
                        echo "Submit time is $sub_datEtime"
                        echo "Report time is $rep_datEtime"

                        # pulls runtimes out of runtime variable also can store in array
                        t_runtime=$(echo ${runtime} | grep -o -E "[0-9]+")
                        TOTAL_RUNTIME=$((TOTAL_RUNTIME+$t_runtime))
                        RUNTIMES+=($t_runtime) #not currently used
                        
                        t_turnaround=$(echo ${turnaround} | grep -o -E "[0-9]+")
                        TOTAL_TURNTIME=$((TOTAL_TURNTIME+$t_turnaround))
                        TURNTIMES+=($t_turnaround) #not currently used
      
                        [[ "$x" = true ]] && f_sub_datEtime=$sub_datEtime && x=false
                        [[ "$y" = true ]] && f_rep_datEtime=$rep_datEtime && y=false 
               

                        [[ $f_sub_datEtime < $sub_datEtime ]] && f_sub_datEtime=$sub_datEtime
                        [[ $f_rep_datEtime > $rep_datEtime ]] && f_rep_datEtime=$rep_datEtime
 
                        echo "f_sub_datEtime = $f_sub_datEtime"
                        echo "f_rep_datEtime = $f_rep_datEtime"



                fi
        done
       

        echo
        echo "-----------------------------------------------------------------------------------"
        printf "                         ${LGREEN}TOTAL RUN TIME FOR HOST: ${NC}${LORANGE}$host${NC}\n"
        echo "-----------------------------------------------------------------------------------"


        # set variables/environment for next process
        [[ "$launch1" = true ]] && longest_time=$TOTAL_RUNTIME && quickest_time=$TOTAL_RUNTIME && launch1=false
        [[ "$launch2" = true ]] && longest_turn=$TOTAL_TURNTIME && quickest_turn=$TOTAL_TURNTIME && launch2=false

        c_time="$(conv_sec $TOTAL_RUNTIME)"
        r_time="$(conv_sec $TOTAL_TURNTIME)"
        printf " ${LGREEN}HOST:${NC} ${LORANGE}$host${NC} ${LGREEN}RUNT TIME:${NC} ${LORANGE}$c_time${NC}  ${LGREEN}TURN AROUND TIME:${NC} ${LORANGE}$r_time${NC}\n"
        echo        
        
        [[ $TOTAL_RUNTIME -ge $longest_time ]] && longest_time=$TOTAL_RUNTIME
        [[ $TOTAL_RUNTIME -le $quickest_time ]] && quickest_time=$TOTAL_RUNTIME

        [[ $TOTAL_TURNTIME -ge $longest_turn ]] && longest_turn=$TOTAL_TURNTIME
        [[ $TOTAL_TURNTIME -le $quickest_turn ]] && quickest_turn=$TOTAL_TURNTIME
        
        # concatonate host+total run time with delimeter for key value format and put in array
        index="$TOTAL_RUNTIME-$host-$TOTAL_TURNTIME"
        TIME_HOST_TURN+=($index)

        ## SETUP ENVIRONMENT FOR NEXT RUN    
        num_start=$((num_start + 1)) # increment for next item in ARGV queue
        TOTAL_RUNTIME=0 # reset calculated time variable
        TOTAL_TURNTIME=0
done



###  TOTAL OUTPUTS FROM ALL RUNS
echo "------------------------------------------------------------------------------------"
printf "                                ${LCYAN}OUTPUT OF ALL FILES${NC}\n"
echo "------------------------------------------------------------------------------------"

# SET ENVIRONMENT FOR THIS RUN
start_n=0
end_n=${#TIME_HOST_TURN[@]} # get total in array

# now extract all "time_host_turn" from array, seperate with parameter expansion using as a "key"-"value" idea
while [[ $start_n -lt $end_n ]]
do
        for x in ${TIME_HOST_TURN[$start_n]}
        do
                ftime=${x%%-*}
                fhost=${x%-*}
                fhost=${fhost#*-}
                fturn=${x##*-}
                
                
                rr_time="$ftime"
                ff_time="$fturn"

                #rr_time="$(conv_sec $ftime)" #convert sec to time
                #ff_time="$(conv_sec $fturn)"


                [[ $ftime -eq $quickest_time ]] && [[ $fturn -ne $quickest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}  ${LGREEN}QUICKEST RUN TIME${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC}\n\n"  
                
                [[ $ftime -eq $quickest_time ]] && [[ $fturn -eq $quickest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}  ${LGREEN}QUICKEST RUN TIME${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC} ${LGREEN}QUICKEST TURN AROUND TIME${NC}\n\n"

                [[ $ftime -ne $quickest_time ]] && [[ $fturn -eq $quickest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC} ${LGREEN}QUICKEST TURN AROUND TIME${NC}\n\n"

                

                [[ $ftime -eq $longest_time ]] && [[ $fturn -ne $longest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}  ${LRED}LONGEST RUN TIME${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC}\n\n"
                
                [[ $ftime -eq $longest_time ]] && [[ $fturn -eq $longest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}  ${LRED}LONGEST RUN TIME${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC}  ${LRED}LONGEST TURN AROUND TIME${NC}\n\n"
 
                [[ $ftime -ne $longest_time ]] && [[ $fturn -eq $longest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC}  ${LRED}LONGEST TURN AROUND TIME${NC}\n\n"

                

                [[ $ftime -ne $quickest_time ]] && [[ $ftime -ne $longest_time ]] && [[ $fturn -ne $quickest_turn ]] && [[ $fturn -ne $longest_turn ]]\
                && printf " ${LBLUE}HOST:${NC}  ${LORANGE}$fhost${NC}   ${LBLUE}RUN TIME ON HOST:${NC}   ${LORANGE}$rr_time${NC}\n"\
                && printf "              ${LBLUE}TURN AROUND TIME:${NC}   ${LORANGE}$ff_time${NC}\n\n"


                start_n=$((start_n + 1))
        done
done
echo
echo
        




